#!/usr/bin/env python

# Copyright 2018 UW-APL
# See LICENSE

"""The Python implementation of the GRPC frame.Controller client."""

from __future__ import print_function

import grpc
import time

import frame_controller.frame_controller_pb2 as frame_api
import frame_controller.frame_controller_pb2_grpc as frame_grpc


def run():
    channel = grpc.insecure_channel('localhost:50051')
    stub = frame_grpc.FrameControllerStub(channel)

    speed = 0.75
    dur = 8

    try:
      request = frame_api.SetVelocityRequest()
      #request.axes = frame_api.AXIS_YAW
      #request.motors = frame_api.CONT_BOTH
      #request.duty_cycle = speed
      #response = stub.SetVelocity(request)
      #print("Got this response: %s" % response)
      #time.sleep(dur)

      #request.duty_cycle = -speed
      #request.axes = frame_api.AXIS_PITCH
      #response = stub.SetVelocity(request)
      #print("Got this response: %s" % response)
      #time.sleep(12)


      while True:

        print("Sending motor velocity")
     
        request.axes = frame_api.AXIS_YAW
        request.motors = frame_api.CONT_BOTH
        request.duty_cycle = speed
        response = stub.SetVelocity(request)
        print("Got this response: %s" % response)
        time.sleep(dur)

        request.axes = frame_api.AXIS_PITCH
        response = stub.SetVelocity(request)
        print("Got this response: %s" % response)
        time.sleep(dur/2)

        request.axes = frame_api.AXIS_YAW
        request.duty_cycle= -speed
        response = stub.SetVelocity(request)
        print("Got this response: %s" % response)
        time.sleep(dur)

        request.axes = frame_api.AXIS_PITCH
        response = stub.SetVelocity(request)
        print("Got this response: %s" % response)
        time.sleep(dur)


    except KeyboardInterrupt:

      print("Sending stop all")
      response = stub.StopAll(frame_api.StopAllRequest())
      print("Got this response: %s" % response)


if __name__ == '__main__':
    run()
