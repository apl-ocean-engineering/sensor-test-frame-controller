#!/usr/bin/env python

# Copyright 2018 UW-APL
# See LICENSE

"""The Python implementation of the GRPC frame.Controller client."""

from __future__ import print_function

import grpc
import time

import frame_controller.frame_controller_pb2 as frame_api
import frame_controller.frame_controller_pb2_grpc as frame_grpc


def run():
    channel = grpc.insecure_channel('localhost:50051')
    stub = frame_grpc.FrameControllerStub(channel)


    # while 1:
    #     print("Single Axis Rotation Actuator")
    #     print("PWM Frequency: " + str(freq))
    #     print("---------------------------------------------------------")
    #     direction = raw_input("Enter Direction (+/-) or (c)lear or e(x)it: ")
    #     if direction == 'x':
    # 	break
    #     if direction == 'c':
    #         os.system('clear')
    #         continue
    #     speed = raw_input("Enter % Speed of Motion (0-100) or (c)lear or e(x)it: ")
    #     if speed == 'x':
    #         break
    #     if speed == 'c':
    #         os.system('clear')
    #         continue
    #     duration = raw_input("Enter Con(t)inuous Movement or Duration in seconds or (c)lear or e(x)it: ")
    #     if duration == 'x':
    #         break
    #     if duration == 'c':
    #         os.system('clear')
    #         continue
    #     if int(speed) >= 0 and int(speed) <= 100 and (duration == 't' or float(duration) >= 0) and (direction == '+' or direction == '-'):
    #         confirmation = raw_input("Execute Rotation in " + str(direction) + " Direction at " + str(speed) + "% Speed for " + str(duration) + " seconds? (y/n) ")
    #         if confirmation == 'y'
    #             PWM.set_duty_cycle(M1_PWM_PIN, float(speed))
    #             PWM.set_duty_cycle(M2_PWM_PIN, float(speed))
    # 	    if direction == '+' :
    #                 GPIO.output(M1_DIRECTION_PIN, GPIO.HIGH)
    #                 GPIO.output(M2_DIRECTION_PIN, GPIO.LOW)
    #             else :
    #                 GPIO.output(M1_DIRECTION_PIN, GPIO.LOW)
    #                 GPIO.output(M2_DIRECTION_PIN, GPIO.HIGH)
    #             print("Executing...")
    #             if duration == 't' :
    #                 stop = raw_input("Enter (x) to Stop Motion: ")
    #             else :
    #                 time.sleep(float(duration))
    #                 print("Done in " + str(duration) + " seconds.")
    #             PWM.set_duty_cycle(M1_PWM_PIN, 0.0)
    #             PWM.set_duty_cycle(M2_PWM_PIN, 0.0)
    #     else :
    # 	print("Non-legal value(s) given.")

    print("Sending motor velocity")
    request = frame_api.SetVelocityRequest()
    request.motors = frame_api.CONT1_BOTH
    request.duty_cycle = 0.5

    response = stub.SetVelocity(request)
    print("Got this response: %s" % response)

    request.motors = frame_api.CONT2_MOTOR1
    request.duty_cycle = -0.75
    response = stub.SetVelocity(request)
    print("Got this response: %s" % response)

    time.sleep(2)

    print("Sending stop all")
    response = stub.StopAll(frame_api.StopAllRequest())
    print("Got this response: %s" % response)


if __name__ == '__main__':
    run()
